import{W as a,l as I,m as c,n as l,p as N,q as p,r as O}from"./index.48c113a5.js";const o={INSTALLED:"INSTALLED",NOT_INSTALLED:"NOT_INSTALLED",REGISTERED:"REGISTERED",REGISTERING:"REGISTERING",RELOADING:"RELOADING"},g={CHROME:"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn",FIREFOX:"https://addons.mozilla.org/firefox/addon/ether-metamask/",EDGE:"https://microsoftedge.microsoft.com/addons/detail/metamask/ejbalbakoplchlghecdalmeeeajnimhm",DEFAULT:"https://metamask.io"},r="REGISTRATION_IN_PROGRESS",E="FORWARDER_ID",i=class{constructor({forwarderOrigin:t="https://fwd.metamask.io",forwarderMode:e=i.FORWARDER_MODE.INJECT}={}){this.forwarderOrigin=t,this.forwarderMode=e,this.state=i.isMetaMaskInstalled()?o.INSTALLED:o.NOT_INSTALLED;const s=i._detectBrowser();s?this.downloadUrl=g[s]:this.downloadUrl=g.DEFAULT,this._onMessage=this._onMessage.bind(this),this._onMessageFromForwarder=this._onMessageFromForwarder.bind(this),this._openForwarder=this._openForwarder.bind(this),this._openDownloadPage=this._openDownloadPage.bind(this),this.startOnboarding=this.startOnboarding.bind(this),this.stopOnboarding=this.stopOnboarding.bind(this),window.addEventListener("message",this._onMessage),e===i.FORWARDER_MODE.INJECT&&sessionStorage.getItem(r)==="true"&&i._injectForwarder(this.forwarderOrigin)}_onMessage(t){if(t.origin===this.forwarderOrigin){if(t.data.type==="metamask:reload")return this._onMessageFromForwarder(t);console.debug(`Unknown message from '${t.origin}' with data ${JSON.stringify(t.data)}`)}}_onMessageUnknownStateError(t){throw new Error(`Unknown state: '${t}'`)}async _onMessageFromForwarder(t){switch(this.state){case o.RELOADING:console.debug("Ignoring message while reloading");break;case o.NOT_INSTALLED:console.debug("Reloading now to register with MetaMask"),this.state=o.RELOADING,location.reload();break;case o.INSTALLED:console.debug("Registering with MetaMask"),this.state=o.REGISTERING,await i._register(),this.state=o.REGISTERED,t.source.postMessage({type:"metamask:registrationCompleted"},t.origin),this.stopOnboarding();break;case o.REGISTERING:console.debug("Already registering - ignoring reload message");break;case o.REGISTERED:console.debug("Already registered - ignoring reload message");break;default:this._onMessageUnknownStateError(this.state)}}startOnboarding(){sessionStorage.setItem(r,"true"),this._openDownloadPage(),this._openForwarder()}stopOnboarding(){sessionStorage.getItem(r)==="true"&&(this.forwarderMode===i.FORWARDER_MODE.INJECT&&(console.debug("Removing forwarder"),i._removeForwarder()),sessionStorage.setItem(r,"false"))}_openForwarder(){this.forwarderMode===i.FORWARDER_MODE.OPEN_TAB?window.open(this.forwarderOrigin,"_blank","noopener"):i._injectForwarder(this.forwarderOrigin)}_openDownloadPage(){window.open(this.downloadUrl,"_blank","noopener")}static isMetaMaskInstalled(){const{ethereum:t}=window;return Boolean(t&&t.isMetaMask)}static _register(){return window.ethereum.request({method:"wallet_registerOnboarding"})}static _injectForwarder(t){const e=document.body,s=document.createElement("iframe");s.setAttribute("height","0"),s.setAttribute("width","0"),s.setAttribute("style","display: none;"),s.setAttribute("src",t),s.setAttribute("id",E),e.insertBefore(s,e.children[0])}static _removeForwarder(){var t;(t=document.getElementById(E))==null||t.remove()}static _detectBrowser(){const{userAgent:t}=window.navigator;return/Firefox\/\d+/.test(t)?"FIREFOX":/Edg\/\d+/.test(t)?"EDGE":/(Chrome|Chromium)\/\d+/.test(t)?"CHROME":null}};let d=i;d.FORWARDER_MODE={INJECT:"INJECT",OPEN_TAB:"OPEN_TAB"};const R={sm:640,md:768,lg:1024,xl:1280,"2xl":1536},b=t=>window.matchMedia(`(max-width: ${t}px)`).matches;var u;const h={isMobi:b(R.lg),ratio:(u=window.devicePixelRatio)!=null?u:2};window.addEventListener("resize",()=>h.ratio=window.devicePixelRatio,{passive:!0});class A{constructor(e){this.onboarding=new d,this.provider=e,this.accounts=[],this.inited=!1,this.state=this.updateState(),this.listeners=new Map}updateState(){return this.state=a[d.isMetaMaskInstalled()?"INSTALLED":this.inited?"NOT_INSTALLED":"CONNECTING"]}get account(){const[e=""]=this.accounts;return e}updateAccounts(e=[]){this.accounts.length=0,this.accounts.push(...e.map(s=>I(s))),c()}updateProvider(e){this.provider.update(e),c()}unlisten(){const{ethereum:e}=window;!e||this.listeners.forEach((s,n)=>e.removeAllListeners(n,s))}onMessage(e){console.info(e,"MetaMask onMessage")}async listen(){const{ethereum:e}=window;if(!e)return;this.unlisten(),this.listeners.set("accountsChanged",this.updateAccounts.bind(this)),this.listeners.set("connect",this.updateAccounts.bind(this)),this.listeners.set("disconnect",this.updateAccounts.bind(this)),this.listeners.set("chainChanged",this.updateProvider.bind(this)),this.listeners.set("message",this.onMessage.bind(this)),this.listeners.forEach((w,m)=>e.addListener(m,w));const[s,n]=await Promise.all([l(e),N(e)])||[];s&&this.updateProvider(s),n&&this.updateAccounts(n)}disconnect(){this.unlisten(),this.onboarding.stopOnboarding(),[a.CONNECTING,a.INSTALLING].includes(this.state)&&this.updateState()}get installText(){return`${h.isMobi?"Open in":"Install"} MetaMask`}async install(){this.state=a.INSTALLING,h.isMobi?location.href="https://metamask.app.link/dapp/lockpass.doid.tech":(this.onboarding.stopOnboarding(),this.onboarding.startOnboarding())}async connect(){this.inited=!0;const e=await p();switch(this.updateState(),this.state){case a.CONNECTING:case a.INSTALLING:case a.NOT_INSTALLED:return}if(this.disconnect(),!!e){this.updateProvider(await l(e)),this.state=a.CONNECTING;try{const s=await e.request({method:"eth_requestAccounts"});this.updateAccounts(s),this.listen(),this.state=a.CONNECTED}catch(s){throw O(s),this.state=a.DISCONNECTED,s}}}}export{A as default};
