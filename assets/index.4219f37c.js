import{W as r,l as w,m as h,n as c,p as m,q as I,r as N}from"./index.bc8036e7.js";const n={INSTALLED:"INSTALLED",NOT_INSTALLED:"NOT_INSTALLED",REGISTERED:"REGISTERED",REGISTERING:"REGISTERING",RELOADING:"RELOADING"},g={CHROME:"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn",FIREFOX:"https://addons.mozilla.org/firefox/addon/ether-metamask/",EDGE:"https://microsoftedge.microsoft.com/addons/detail/metamask/ejbalbakoplchlghecdalmeeeajnimhm",DEFAULT:"https://metamask.io"},a="REGISTRATION_IN_PROGRESS",l="FORWARDER_ID",i=class{constructor({forwarderOrigin:e="https://fwd.metamask.io",forwarderMode:t=i.FORWARDER_MODE.INJECT}={}){this.forwarderOrigin=e,this.forwarderMode=t,this.state=i.isMetaMaskInstalled()?n.INSTALLED:n.NOT_INSTALLED;const s=i._detectBrowser();s?this.downloadUrl=g[s]:this.downloadUrl=g.DEFAULT,this._onMessage=this._onMessage.bind(this),this._onMessageFromForwarder=this._onMessageFromForwarder.bind(this),this._openForwarder=this._openForwarder.bind(this),this._openDownloadPage=this._openDownloadPage.bind(this),this.startOnboarding=this.startOnboarding.bind(this),this.stopOnboarding=this.stopOnboarding.bind(this),window.addEventListener("message",this._onMessage),t===i.FORWARDER_MODE.INJECT&&sessionStorage.getItem(a)==="true"&&i._injectForwarder(this.forwarderOrigin)}_onMessage(e){if(e.origin===this.forwarderOrigin){if(e.data.type==="metamask:reload")return this._onMessageFromForwarder(e);console.debug(`Unknown message from '${e.origin}' with data ${JSON.stringify(e.data)}`)}}_onMessageUnknownStateError(e){throw new Error(`Unknown state: '${e}'`)}async _onMessageFromForwarder(e){switch(this.state){case n.RELOADING:console.debug("Ignoring message while reloading");break;case n.NOT_INSTALLED:console.debug("Reloading now to register with MetaMask"),this.state=n.RELOADING,location.reload();break;case n.INSTALLED:console.debug("Registering with MetaMask"),this.state=n.REGISTERING,await i._register(),this.state=n.REGISTERED,e.source.postMessage({type:"metamask:registrationCompleted"},e.origin),this.stopOnboarding();break;case n.REGISTERING:console.debug("Already registering - ignoring reload message");break;case n.REGISTERED:console.debug("Already registered - ignoring reload message");break;default:this._onMessageUnknownStateError(this.state)}}startOnboarding(){sessionStorage.setItem(a,"true"),this._openDownloadPage(),this._openForwarder()}stopOnboarding(){sessionStorage.getItem(a)==="true"&&(this.forwarderMode===i.FORWARDER_MODE.INJECT&&(console.debug("Removing forwarder"),i._removeForwarder()),sessionStorage.setItem(a,"false"))}_openForwarder(){this.forwarderMode===i.FORWARDER_MODE.OPEN_TAB?window.open(this.forwarderOrigin,"_blank","noopener"):i._injectForwarder(this.forwarderOrigin)}_openDownloadPage(){window.open(this.downloadUrl,"_blank","noopener")}static isMetaMaskInstalled(){const{ethereum:e}=window;return Boolean(e&&e.isMetaMask)}static _register(){return window.ethereum.request({method:"wallet_registerOnboarding"})}static _injectForwarder(e){const t=document.body,s=document.createElement("iframe");s.setAttribute("height","0"),s.setAttribute("width","0"),s.setAttribute("style","display: none;"),s.setAttribute("src",e),s.setAttribute("id",l),t.insertBefore(s,t.children[0])}static _removeForwarder(){var e;(e=document.getElementById(l))==null||e.remove()}static _detectBrowser(){const{userAgent:e}=window.navigator;return/Firefox\/\d+/.test(e)?"FIREFOX":/Edg\/\d+/.test(e)?"EDGE":/(Chrome|Chromium)\/\d+/.test(e)?"CHROME":null}};let d=i;d.FORWARDER_MODE={INJECT:"INJECT",OPEN_TAB:"OPEN_TAB"};class R{constructor(t){this.onboarding=new d,this.provider=t,this.accounts=[],this.inited=!1,this.state=this.updateState(),this.listeners=new Map}updateState(){return this.state=r[d.isMetaMaskInstalled()?"INSTALLED":this.inited?"NOT_INSTALLED":"CONNECTING"]}get account(){const[t=""]=this.accounts;return t}updateAccounts(t=[]){this.accounts.length=0,this.accounts.push(...t.map(s=>w(s))),h()}updateProvider(t){this.provider.update(t),h()}unlisten(){const{ethereum:t}=window;!t||this.listeners.forEach((s,o)=>t.removeAllListeners(o,s))}onMessage(t){console.info(t,"MetaMask onMessage")}async listen(){const{ethereum:t}=window;if(!t)return;this.unlisten(),this.listeners.set("accountsChanged",this.updateAccounts.bind(this)),this.listeners.set("connect",this.updateAccounts.bind(this)),this.listeners.set("disconnect",this.updateAccounts.bind(this)),this.listeners.set("chainChanged",this.updateProvider.bind(this)),this.listeners.set("message",this.onMessage.bind(this)),this.listeners.forEach((E,u)=>t.addListener(u,E));const[s,o]=await Promise.all([c(t),m(t)])||[];s&&this.updateProvider(s),o&&this.updateAccounts(o)}disconnect(){this.unlisten(),this.onboarding.stopOnboarding(),[r.CONNECTING,r.INSTALLING].includes(this.state)&&this.updateState()}async install(){this.state=r.INSTALLING,this.onboarding.stopOnboarding(),this.onboarding.startOnboarding()}async connect(){this.inited=!0;const t=await I();switch(this.updateState(),this.state){case r.CONNECTING:case r.INSTALLING:case r.NOT_INSTALLED:return}if(this.disconnect(),!!t){this.updateProvider(await c(t)),this.state=r.CONNECTING;try{const s=await t.request({method:"eth_requestAccounts"});this.updateAccounts(s),this.listen(),this.state=r.CONNECTED}catch(s){throw N(s),this.state=r.DISCONNECTED,s}}}}export{R as default};
