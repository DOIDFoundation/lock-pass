System.register(["./index-legacy.1935ee4f.js","./vendor-legacy.fd995045.js","./index-legacy.2370c19c.js"],(function(t,e){"use strict";var s,i,a,o,n,r,c,l,d,p,h,m,g,u,y,b,v,x,w;return{setters:[t=>{s=t.T,i=t.b,a=t.h},t=>{o=t.b,n=t.y,r=t.f,c=t.h,l=t.e,d=t.d,p=t.n,h=t.E,m=t.k},t=>{g=t.a,u=t.d,y=t.e,b=t.f,v=t.h,x=t.i,w=t.j}],execute:function(){var e=Object.defineProperty,k=Object.getOwnPropertyDescriptor,$=(t,s,i,a)=>{for(var o,n=a>1?void 0:a?k(s,i):s,r=t.length-1;r>=0;r--)(o=t[r])&&(n=(a?o(s,i,n):o(n))||n);return a&&n&&e(s,i,n),n};let f=class extends(s("")){constructor(){super(...arguments),this.bindBridge=new o(this,i),this.name="",this.limit="0",this.inviteCode="",this.genInviteCode=async()=>{try{let t=await g();t&&(this.inviteCode=t)}catch(c){}}}get bridge(){return i.bridge}get inviteLink(){return`https://lockpass.doid.tech/?ic=${this.inviteCode}`}async connectedCallback(){super.connectedCallback(),this.limit=await u()}get shareText(){return`DOID lock name event is live. Mint your lock pass NFT for free and reserve your desired name now. Get invitation here: ${this.inviteLink}`}render(){return n`<p class="text-sm text-gray-500">You have <b>${this.limit}</b> invitations in total. Copy the invitation code or share the link.</p><div class="py-2">${this.inviteCode?n`<textarea class="block w-full h-24 my-3 border border-solid border-gray-200 py-2 px-2 text-gray-400" readonly="readonly">
${this.shareText}</textarea><dui-copy value="${this.shareText}" sm class="outlined"><span slot="copied">Copy<i class="ml-1 mdi mdi-check text-green-600"></i></span><span slot="copy">Copy<i class="ml-1 mdi mdi-content-copy"></i></span></dui-copy>`:+this.limit>0?n`<dui-button sm @click="${this.genInviteCode}">Share</dui-button>`:n``}</div>`}};$([c()],f.prototype,"name",2),$([r()],f.prototype,"limit",2),$([r()],f.prototype,"inviteCode",2),f=$([l("pass-share")],f);var C=Object.defineProperty,P=Object.getOwnPropertyDescriptor,j=(t,e,s,i)=>{for(var a,o=i>1?void 0:i?P(e,s):e,n=t.length-1;n>=0;n--)(a=t[n])&&(o=(i?a(e,s,o):a(o))||o);return i&&o&&C(e,s,o),o};let L=class extends(s(":host{--posterSize: 90px}.pass{position:relative;min-height:8.5rem;display:flex;gap:1rem;border-width:1px;--tw-border-opacity: 1;border-color:rgba(209,213,219,var(--tw-border-opacity));padding:1rem}.pass .poster{margin-bottom:1rem;width:var(--posterSize);height:var(--posterSize)}.pass .poster:not(.minted){--tw-bg-opacity: 1;background-color:rgba(243,244,246,var(--tw-bg-opacity))}.pass .name.locked{font-size:1rem;line-height:1.5rem}.pass .status.locked{--tw-text-opacity: 1;color:rgba(22,163,74,var(--tw-text-opacity))}.pass .status.unlock{--tw-text-opacity: 1;color:rgba(107,114,128,var(--tw-text-opacity))}.pass .status.minted{--tw-text-opacity: 1;color:rgba(96,165,250,var(--tw-text-opacity))}\n")){constructor(){super(...arguments),this.bindBridge=new o(this,i),this.item={},this.tx=null,this.success=!1,this.dialog=!1,this.doClaim=async()=>{try{this.tx=await y(this.item.id),this.success=await this.tx.wait()}catch(t){if(4001===t.code)return}}}get bridge(){return i.bridge}get scan(){return this.bridge.network.current.scan}get tokenLink(){return`${this.scan}/token/${a("Locker")}?a=${this.item.id}`}get txPending(){return this.tx&&!this.tx?.ignored}close(t=!1){this.dialog=!1,this.tx=void 0,t&&this.emit("change")}claim(){this.dialog=!0}render(){let t="",e="";return this.item.name?(t="locked",e="Locked"):(t="unlock",e="No name locked yet"),n`<div class="pass ${d({})}"><div class="poster ${d({minted:this.item.meta.image,"opacity-40":this.dialog,grayscale:this.dialog})}"><img src="${this.item.meta.image}" class="object-contain"></div><div class="flex flex-col justify-between text-xs ${d({"opacity-40":this.dialog,grayscale:this.dialog})}"><div><span class="text-base">#${this.item.id}</span><p class="mb-4"><dui-link class="text-black uri" href="${this.tokenLink}" target="_blank">View on etherscan</dui-link></p></div><div><div class="status ${t}">${e}</div>${p(this.item.name,(()=>n`<div class="name ${t}"><b class="text-blue-600">${this.item.name}</b>.doid</div>`))}<div class="actions mt-2">${p(this.item.name,(()=>n`<dui-button ?disabled="${this.dialog}" ?pending="${this.dialog}" class="secondary" @click="${this.claim}" sm>Claim</dui-button>`),(()=>n`<dui-button href="/?pid=${this.item.id}" sm>Lock a name</dui-button>`))}</div></div></div>${p(this.dialog,(()=>n`<dui-dialog @close="${()=>this.close()}"><div slot="header">Claim DOID name</div><div class="min-h-10">${p(!this.tx?.success,(()=>n`<div class="text-center">You are claiming for:<p class="text-black my-4 text-lg"><b class="text-blue-600">${this.item.name}</b>.doid</p><p>${n`(Note: This pass <b>#${this.item.id}</b> will be burned after claiming.)`}</p></div>`))} ${p(this.txPending,(()=>n`<tx-state .tx="${this.tx}" .opts="${{state:{success:`Success. You are the registrant of ${this.item.name} now`}}}"><dui-button slot="view" @click="${()=>this.close(!0)}">Close</dui-button></tx-state>`),(()=>n`<p class="mt-8 text-center"><dui-button class="success" @click="${this.doClaim}">Continue</dui-button></p>`))}</div></dui-dialog>`))}</div>`}};j([c({type:Object})],L.prototype,"item",2),j([r()],L.prototype,"tx",2),j([r()],L.prototype,"success",2),j([r()],L.prototype,"dialog",2),L=j([l("pass-item")],L);var O=Object.defineProperty,D=Object.getOwnPropertyDescriptor,T=(t,e,s,i)=>{for(var a,o=i>1?void 0:i?D(e,s):e,n=t.length-1;n>=0;n--)(a=t[n])&&(o=(i?a(e,s,o):a(o))||o);return i&&o&&O(e,s,o),o};let I=t("ViewPasses",class extends(s(".passes{height:300px;height:100%;--tw-bg-opacity: 1;background-color:rgba(255,255,255,var(--tw-bg-opacity))}.pass-list{display:grid;grid-template-columns:repeat(1,minmax(0,1fr));grid-gap:1rem;gap:1rem}@media (min-width: 1024px){.pass-list{grid-template-columns:repeat(2,minmax(0,1fr))}}\n")){constructor(){super(...arguments),this.bindBridge=new o(this,i),this.name="",this.passes=[],this.pending=!1,this.ts=0}get bridge(){return i.bridge}async getUserPassList(){if(i.notReady)return;this.pending=!0;const{account:t}=i.bridge,e=await b();try{const s=await v(t,!0),i=await x();let a=await Promise.all(s.map((async t=>{const[s,a,o]=t,n=h(s,0),r=i[a]??[],l={id:n,cate:r[0],hash:o,meta:{}},d=await Promise.all([w(o),e.tokenURI(n)]);l.name=d[0],l.len=`${r[1]}`;try{l.meta=await(await fetch(d[1])).json()}catch(c){}return l})));this.passes=a.sort(((t,e)=>t.id-e.id)).sort(((t,e)=>t.name?e.name?t.id-e.id:-1:1))}catch(s){console.log(s,"get passess failed"),this.passes=[]}finally{this.ts++,this.pending=!1}}get empty(){return this.ts&&!this.passes.length}connectedCallback(){super.connectedCallback(),this.getUserPassList()}render(){return n`<div class="passes py-4"><div class="lg_w-3/5 my-8 mx-3 lg_mx-auto"><section><p class="text-base mb-2">Note</p><ul class="note list-disc mx-4"><li>You can only mint one Lock Pass for one wallet address.</li><li>Once you successfully locked your name. Your name will be reserved for 7 days after the official launch(22nd Dec,2022). Those locked but unminted names will be released to the public pool afterwards.</li></ul><dui-link href="${"https://twitter.com/DoidFoundation"}" target="_blank" rel="noopener" class="inline-flex my-1 text-base">Follow DOID Twitter and stay connected</dui-link></section>${p(i.noAccount,(()=>n`<div class="my-8 text-center"><connect-wallet-btn></connect-wallet-btn></div>`),(()=>n`<section class="mt-6"><h2 class="my-4 text-xl">My Lock Pass</h2><div class="py-4">${p(this.empty,(()=>n`No passes yet.`),(()=>n`${p(this.pending,(()=>n`<i class="mdi mdi-loading mr-1"></i>Loading...`),(()=>n`<div class="pass-list">${m(this.passes,(t=>n`<pass-item @change="${this.getUserPassList}" key="${t.id}" .item="${t}"></pass-item>`))}</div>`))}`))}</div></section><section class="mt-6"><h2 class="text-xl mb-2">Share Lock Pass Invitations</h2>${this.passes.length?n`<pass-share></pass-share>`:n``}</section>`))}</div></div>`}});T([c()],I.prototype,"name",2),T([r()],I.prototype,"passes",2),T([r()],I.prototype,"pending",2),T([r()],I.prototype,"ts",2),t("ViewPasses",I=T([l("view-passes")],I))}}}));
